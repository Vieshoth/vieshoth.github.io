---
layout: post
title:  "booting linux with qemu"
date:   2016-12-25
categories: linux
author: "Vieshoth"
---

## Booting linux with qemu

In this blog Ill be writing on how we can boot kernel in qemu virtual emulator.

To do this we need three packages in our system.
1. qemu package.
2. kernel source package.
3. busybox source package.

### Installing qemu
To insall qemu package in your ubuntu system enter this command.

```
sudo apt-get install qemu-kvm qemu virt-manager virt-viewer libvirt-bin
```
I assume you have a basic knowlegde in linux and busybox.

Download the linux source code from the following page.

```
https://www.kernel.org/pub/linux/kernel/v4.x/
```

I have downloaded linux-4.1.36.tar.xz

Download the busybox source code from the following page.

```
http://busybox.net/downloads/busybox-1.23.2.tar.bz2
```

### Building linux kernel

Go inside the kernel source code and configure the kernel

```
make x86_64_defconfig
make kvmconfig
```

Build the kernel

```
make
```

### Building busybox

To configure busybox

```
make defconfig
```

enable static linking in busybox from menuconfig

```
make menuconfig
```

type /, search for “static”. You’ll see that the option is located at:

```
-> Busybox Settings
  -> Build Options
[ ] Build BusyBox as a static binary (no shared libs)
```
select it save and exit.

build busybox

```
make
make Install
```

### Building initramfs

Come out of the busuybox source code
and create a directory structure for initramfs

```
mkdir -p initramfs
cd initramfs
mkdir -pv {bin,sbin,etc,proc,sys,usr/{bin,sbin}}
cp -av <PATH TO BUSYBOX SOURCE CODE>/_install/* .
```

Now create a init file

```
vim init
```
and the below script

```
#!/bin/sh

mount -t proc none /proc
mount -t sysfs none /sys

echo -e "\nBoot took $(cut -d' ' -f1 /proc/uptime) seconds\n"

exec /bin/sh
```
and make it executable

```
chmod +x init
```

cpio the initramfs

```
 find . -print0 cpio --null -ov --format=newc gzip -9 > initramfs-busybox-x86.cpio.gz
```
### Boot the kernel

```
qemu-system-x86_64 \
-kernel <PATH_TO_THE_KERNEL_SOURCE_CODE>/arch/x86_64/boot/bzImage \
-initrd <PATH_TO_INITRAMFS>/initramfs-busybox-x86.cpio.gz \
-nographic -append "console=ttyS0" -enable-kvm
```
You should be able to see the kenel booting.


[//]: <> (For more information  http://mgalgs.github.io/2015/05/16/how-to-build-a-custom-linux-kernel-for-qemu-2015-edition.html)
