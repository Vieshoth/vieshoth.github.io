In this blog I am going to show how to create and access numpy arrays. 

## Introduction to numpy.

Numpy is Python library package for scientific computations. Basic data structure of numpy is an array.

## Creating numpy arrays 

Numpy arrays can be created in many ways. Here we have listed few of them.

### Creating numpy arrays with python list.

We can import the numpy and assign a short name to it so that it would be easy for us call it back.
```
import numpy as np
```
To find out the numpy's version use numpy's version attribute
```
print(np.__version__)
```
In this method we are going to create a numpy array using python list.
And then give this list as an argument to numpy's method "array" as shown below
Now call array method of np and give this list as input to create a numpy array
```
my_np_array = np.array(<Python list>)
```
array is method of numpy library which creats an array from Python list.

```
>>> import numpy as np	# import numpy array
>>>
>>>
>>> print(np.__version__)
1.13.3
>>>
>>>
>>> my_list = [5,48, 68,-8,2] 	# creating a list with square brackets
>>>
>>>
>>> print(my_list)      # Print the list
[5, 48, 68, -8, 2]
>>>
>>>
>>> numpy_array = np.array(my_list) #Creating numpy array using "array" method
>>>
>>> print(numpy_array)
[ 5 48 68 -8  2]
```

### Creating numpy arrays with numpy functions

numpy array can be created with out a python list using a numpy arange method.
For numpy arange syntax visit this link
https://docs.scipy.org/doc/numpy/reference/generated/numpy.arange.html 

To create numpy array which count from 0 to 10
```  
>>> np.arange(10)
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
```  

This method includes the start value and excludes the stop value. The example below gives you more understanding.
Here '5' is the start value which is included in the list and the '50' is excluded.
```  
>>> np.arange(5, 50)
array([ 5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
       22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
       39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49])
```  

We can also use the step argument which creates a list with step size between the start value and the end value. 
For example here the list start from '4' and the adjecent values between the two values are 5
```  
>>> np.arange(4, 50, 5)
array([ 4,  9, 14, 19, 24, 29, 34, 39, 44, 49])
```  

This is a same example as above one, but the only differnce is start value is not given so it takes '0' as the start value.
```  
>>> np.arange(50, step=5)
array([ 0,  5, 10, 15, 20, 25, 30, 35, 40, 45])
```  

### Instantiating arrays with one or more integers.

linspace function creates an array evenly or linearly spaced. For more visit:
https://docs.scipy.org/doc/numpy/reference/generated/numpy.linspace.html

This linspace function takes both the start value and end value to the list.
In linspace the third argument is 'num'. Using this we can specify the samples to be generated between the start value 
and stop value including the start and stop value.
In this example the linspace method creates a list between 0 to 9 containing 10 values.
```  
>>> np.linspace(0,9,10)
array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.])
```  

The below example creates a list of 5 numbers from 0 to 10 
```  
>>> np.linspace(0,10,5)
array([  0. ,   2.5,   5. ,   7.5,  10. ])
```  

If you do not want the stop value to included in the list, you can do that by using the fourth argument "endpoint=False".
As shown in the example we can clearly see the stop value is excluded from the list.
```  
np.linspace(0,10,5, endpoint=False)
array([ 0.,  2.,  4.,  6.,  8.])
```  

### Creating arrays with zeros

Creating an array full of zeros is alos possible in numpy. The method 'zeros' does this job for us.
For example this creates a array of 5 zeros since we have given the '5' as the argument to the zeros method.
```  
np.zeros(5)
array([ 0.,  0.,  0.,  0.,  0.])
```  

By default the data types for linspace and zeros are floating number. 
To change that we can assign interger type to 'dtype' argument as shown below.
```  
np.zeros(5, dtype='int64')
array([0, 0, 0, 0, 0])
```  

For more info about numpy dtypes
https://docs.scipy.org/doc/numpy/user/basics.types.html

## Arithmatic operations between numpy arrays

In Python, 
	* performing arithmatic operation on element by element basis is not possible.
	* performing arithmatic operations between between list is not possible. 
	
For instance take this example below. We expect this statement to multiply the element inside the list by the number 5.
But instead, it expand the size of the list to 5 times.
```
>>> my_list =  [5,8,4,9,6] 
>>> my_list * 5
[5, 8, 4, 9, 6, 5, 8, 4, 9, 6, 5, 8, 4, 9, 6, 5, 8, 4, 9, 6, 5, 8, 4, 9, 6]
>>>
```

And then when I tried adding the number with the list. It throws an error.
```
>>>
>>>
>>> my_list + 5
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can only concatenate list (not "int") to list

```
Now lets see what happens if we add two list in python.
For example we create another list "my_list1" which is similar to "my_list". And add them both. 
We expect a result in which the elements of both the list gets added. But it will simply concatenate the two list in one.
```
>>> my_list1 =  [1,2,3,4,5]
>>>
>>> my_list + my_list1
[5, 8, 4, 9, 6, 1, 2, 3, 4, 5]
>>> 
```


In Numpy, 
	* performing arithmatic operation on element by element basis is possible.
	* performing arithmatic operations between between array is possible. 

Lets do the above same operations with numpy arrays and check the result.
For this lets create two numpy arrays. 
First create "my_array" with "my_list" and "my_array1" with "my_list1"
Then add both the arrays.
```
>>> my_array = np.array(my_list)
>>>
>>> print(my_array)
[5 8 4 9 6]
>>>
>>> my_array1 = np.array(my_list1)
>>>
>>> print(my_array1)
[1 2 3 4 5]
>>>
>>> my_array + my_array1
array([ 6, 10,  7, 13, 11])
>>>

```
Another example for multiplication with array

```
>>> my_array * 5
array([25, 40, 20, 45, 30])
```


## Referencing elements within array

Lets create simple array
```
simple_array = np.array([4,8,6,3,5])
```
now if I want to print the 4rd element alone 
the instruction statement is 
```
simple_array[5]
```

## Creating subarray within another array

```
main_array = np.array([4,88,6,3,5, 66, 34, 62, 5])
```
Creating mask array
```
greater_than_fifty = 50 < main_array
```
```
greater_than_fifty
```
```
array([False,  True, False, False, False,  True, False,  True, False], dtype=bool)
```
```
sub_array = main_array[greater_than_fifty]
```
```
sub_array
```
```
array([88, 66, 62])
```
You can do the same thing with 
s_array = main_array[50<main_array]
s_array
array([88, 66, 62])

## Array attributes

main_array.size

main_array.dtype







 